import time
import pandas as pd
import numpy as np

# This application is used to provide data from the bikeshare app depending on the chosen city
# Some of the data provided are: most common trips , most common times , age , trip duration and so on.
# Gender type and age are only provided for Chicago and New york city.

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }


def get_filters():
    while True:
        print('welcome to the Bikeshare app data centre')
        city = input('\nChose a city from Chicago or New York City or Washington to find data for: ')
        city = city.lower().strip()
        if city == 'chicago' or city == 'new york city' or city == 'washington':
            break
        else:
            print('incorrect, please input again')

    while True:
        month = input('\nChose if you would like to sort the data by one of the first six months or by all: ')
        month = month.lower()
        if month == 'all':
            break
        if month == 'january' or month == 'february' or month == 'march' or month == 'april' or month == 'may' or month == 'june':
            break
        else:
            print('incorrect month, please input again')

    while True:
        day = input(
            '\nWould you like to search by specific day ? if so chose the day you like or you can use all to check  '
            'for them all: ')
        day = day.lower()
        if day == 'all':
            break
        if day == 'saturday' or day == 'sunday' or day == 'monday' or day == 'tuesday' or day == 'wednesday' or day == 'thursday' or day == 'friday':
            day = day.lower()
            break
        else:
            print('incorrect day, please try again')
    return city, month, day

def raw_data(df):
    start = 0
    end = 5
    for i in df:
        print(df.iloc[start:end])
        more_data = input('would you like to see more data (yes/no) ?  ')
        more_data = more_data.lower()
        if more_data == 'yes':
            start += int(5)
            end += int(5)
            print(df.iloc[start:end])
        else:
            break



def load_data(city, month, day):


    # load data file into a dataframe
    df = pd.read_csv(CITY_DATA[city])

    # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name

    # filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1

        # filter by month to create the new dataframe
        df = df[df['month'] == month]

    # filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]
    return df

def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # display most commonly used start station
    most_start_station =df['Start Station'].mode()[0]
    print('Most used starting point is: ',most_start_station)
    # display most commonly used end station
    most_end_station =df['End Station'].mode()[0]
    print('Most end destination is: ',most_end_station)
    # display most frequent combination of start station and end station trip
    most_common_trip = df.groupby(['Start Station','End Station']).size().idxmax()
    print('the most common trip is from {} to {}  '.format(most_common_trip[0], most_common_trip[1]))




    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # display the most common month
    df['month'] = df['Start Time'].dt.month
    popular_month = df['month'].mode()[0]
    print('month: ',popular_month)

    # display the most common day of week
    df['day'] = df['Start Time'].dt.weekday_name
    popular_day = df['day'].mode()[0]
    print('day : ',popular_day)

    # display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    popular_hour = df['hour'].mode()[0]
    print('hour :', popular_hour)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # display total travel time
    travel_time = df['Trip Duration'].sum()
    print('\nTotal travel time in seconds: ',travel_time)
    # display mean travel time
    mean_time = df['Trip Duration'].mean()
    print('\nmean travel time in seconds: ',mean_time)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def user_stats(df,city):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Display counts of user types
    user_types = df['User Type'].value_counts()
    print(user_types)
    while True:
        if city == 'washington':
            break
        else:
            # Display counts of gender
            gender_count = df['Gender'].value_counts()
            print(gender_count)
            # Display earliest, most recent, and most common year of birth
            most_recent = df['Birth Year'].iloc[0]
            print('most recent date of birth : ',most_recent)
            earliest = df['Birth Year'].iloc[-1]
            print('the earliest date of birth is: ', earliest)
            most_common_year = df['Birth Year'].mode()[0]
            print('Most common year of birth is: ',most_common_year)
            break



    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        raw_data(df)
        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df,city)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
